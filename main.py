from time import sleep

from telebot import TeleBot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton

from weather import Weather
from loguru import logger

import os
import sys


bot = TeleBot(os.environ.get("Weather_bot_TOKEN"), parse_mode="HTML")
w = Weather(os.environ.get(os.environ.get("Weather_bot_LINK") or "Weather_bot_Home"))


def out(context):
    time = context["time"].strftime("%d.%m.%Y__%H:%M:%S.%f")
    level = context["level"]
    message = context["message"].replace("\n", "\n\t")
    return f"{time} | {level} | {message}\n"


logger.remove()
logger.add(sys.stdout, format=out)


def create_keyboard():
    global keyboard
    global days
    days = {
        f"{day['day_number']} {day['month'].title()}": day for day in w.get_all()
    }
    keyboard = [
        ["–û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"],
        ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"],
        list(days.keys())[2:6],
        list(days.keys())[6:],
        [f"{d} –¥–Ω—è" for d in range(2, 5)] + ["5 –¥–Ω–µ–π"],
        [f"{d} –¥–Ω–µ–π" for d in range(6, 11)]
    ]


days = {}
keyboard = []
create_keyboard()


@bot.message_handler(commands=["start", "help", "—Å—Ç–∞—Ä—Ç", "–ø–æ–º–æ—â—å"])
def start(message: Message):
    k = ReplyKeyboardMarkup(True)
    for row in keyboard:
        k.row(*[KeyboardButton(b) for b in row])
    hello = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –æ –ø–æ–≥–æ–¥–µ\n" \
            "–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n" \
            "–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–≥–æ–¥–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å\n\n" \
            "/start –∏ /help –ø–æ–∫–∞–∂—É—Ç —Å–ø—Ä–∞–≤–∫—É"
    bot.reply_to(message, hello)
    bot.send_message(
        message.chat.id,
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ‚Üì",
        reply_markup=k
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

@bot.message_handler(commands=["id"])
def get_id(message: Message):
    bot.reply_to(message, message.from_user.id)

@bot.message_handler(regexp=keyboard[0][0])
def update_keyboard(message: Message):
    create_keyboard()
    k = ReplyKeyboardMarkup(True)
    for row in keyboard:
        k.row(*[KeyboardButton(b) for b in row])
    send_message = bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=k)


@bot.message_handler(func=lambda m: in_keyboard(m.text, keyboard))
def get(message: Message):
    text = message.text
    place = w.soup.select_one('h1.title').text.split(" ‚Äî ")[-1]
    if text in ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"]:
        answer = text_from_day(w.get_day(message.text))
    elif "–¥–Ω" in text:
        num = int(text.split()[0])
        answer = f"{'_' * 50}\n\n".join([text_from_day(day) for day in list(days.values())[:num]])
    elif text in days:
        answer = text_from_day(days[text])
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–¥–µ–ª–∞–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")
        return
    bot.reply_to(message, f"<b><u>{f'–ü–æ–≥–æ–¥–∞ –Ω–∞ {message.text}'.upper()}</u></b>\n{place}\n\n{answer}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –ø–æ–≥–æ–¥—É –Ω–∞ {text.lower()}")


def in_keyboard(text: str, keyboard: list):
    for row in keyboard:
        if text in row:
            return True
    return False


def text_from_day(day: dict):
    weather_icon = {
        "–Ø—Å–Ω–æ": "‚òÄüåô",
        "–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ": ("üå§", "üåô‚òÅ"),
        "–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "‚õÖ‚õÖ",
        "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üåßüåß",
        "–ü–∞—Å–º—É—Ä–Ω–æ": "‚òÅ‚òÅ",
        "–î–æ–∂–¥—å": ("üåßüåß",) * 2,
        "–õ–∏–≤–Ω–∏": ("üåßüåßüåßüåß",) * 2,
        "–õ–∏–≤–µ–Ω—å": ("üåßüåßüåßüåß",) * 2,
        "–°–Ω–µ–≥": ("üå®Ô∏èüå®Ô∏è",) * 2,
        "–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º": ("üåßüå®Ô∏è",) * 2,
        "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥": ("üå®Ô∏è",) * 2,
    }
    ans = f"<b><u>{day['day_number']} {day['month'].title()}, {day['day_name'].title()}</u></b>\n"
    try:
        ans += "".join(
            f'<b>{day_part.title():7} {weather_icon[weather["weather"]][day_part == "–Ω–æ—á—å—é"]}</b> \n'
            f'–æ—Ç {weather["min_temp"]:3} –¥–æ {weather["max_temp"]:3} -> '
            f'{weather["weather"]}\n'
            for day_part, weather in day["day"].items()
        )
    except KeyError as err:
        logger.error(f'–ù–µ—Ç —ç–º–æ–¥–∂–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã "{err.args[0]}"')
    return ans
